# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

            # Install hydrodiy
            DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
            cd ..
            git clone git@bitbucket.org:jlerat/hydrodiy.git 
            cd hydrodiy
            python setup.py install
            cd $DIR

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run scripts
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            
            # Install package and build binaries
            python setup.py build_ext --inplace --force
            
            # Remove warnings
            export PYTHONWARNINGS="ignore"

            # Running tests
            echo "Running model tests"
            python -W ignore `which nosetests` tests/test_pygme_model.py
            
            echo "Running calibration tests"
            python -W ignore `which nosetests` tests/test_pygme_calibration.py
            
            echo "Running utils tests"
            python -W ignore `which nosetests` tests/test_pygme_utils.py
            
            echo "Running Turc-Mezentsev tests"
            python -W ignore `which nosetests` tests/test_pygme_turcmezentsev.py
            
            echo "Running GR2M tests"
            python -W ignore `which nosetests` tests/test_pygme_gr2m.py
            
            echo "Running Lagroute tests"
            python -W ignore `which nosetests` tests/test_pygme_lagroute.py
            
            echo "Running GR4J tests"
            python -W ignore `which nosetests` tests/test_pygme_gr4j.py
            
            echo "Running GR6J tests"
            python -W ignore `which nosetests` tests/test_pygme_gr6j.py

            # coverage
            coverage xml --rcfile=.coveragerc

            # Pylint
            #pylint --rcfile pylintrc hydrodiy > pylint_results

            # Install hydrodiy
            python setup.py install
            
            # Running examples
            python -W ignore examples/run_all_examples.py

          no_output_timeout: 50m
 
      - store_artifacts:
          path: test-reports
          destination: test-reports
          
